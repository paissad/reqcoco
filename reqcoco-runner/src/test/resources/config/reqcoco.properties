#===============================
#### GLOBAL
#===============================
# The level of the log. Default value is 'INFO' if not set.
# Possible values are OFF | ERROR | WARN | INFO | DEBUG | TRACE
log.level=TRACE

# Whether or not to generate the coverage report onto the console (Default value is 'false')
report.console=false

# Whether or not to generate the coverage report in HTML (Default value is 'true')
report.html=true

# Whether or not to generate the coverage report in EXCEL (Default value is 'true')
report.excel=true

# Whether or not to generate the coverage report in PDF (Default value is 'true')
report.pdf=true

# Whether or not to aggregate all reports into a single .zip file (Default value is 'true')
report.zip=true

# Whether or not to generate the raw report coverage file which is built in XML (Default value is 'false')
create.raw.report.file=false

# Path where the source code is located (directory or file)
code.source.path=src/test/resources/input-samples/code/source

# Path where the test code is located (directory or file)
code.test.path=src/test/resources/input-samples/code/test

# The list of files and directories to include while parsing the source and test code
# By default, everything is included !
# Example :
#resource.includes=*.java,*.txt,*.properties
resource.includes=*

# The list of files and directories to exclude while parsing the source and test code
# Example : 
#resource.excludes=*.svn,.git,.DS_Store
resource.excludes=*.bin,.git,.DS_Store

# The list of requirements IDs to ignore while computing the coverage report
# Example :
#requirement.ignores=Req_1,Req2
requirement.ignores=req_2,req_9

#===============================
#### FILE
#===============================

#===============================
#### REDMINE
#===============================
# The name of the redmine project to parse
redmine.project.id=1

# Whether or not to include children issues while parsing the project (true|false) ... default is true if not set
redmine.include.children=

# Whether or not to include relations of issues while parsing the project (true|false) ... default is true if not set
redmine.include.relations=

# Comma separated list of versions to use for filtering the issues to retrieve. Issues that do not match will not be retrieved.
# If not set, then all issues with any versions will be retrieved.
# Example : 1.0,1.4,1.7-RC1,2.0-alpha
redmine.target.versions=

# The tracker to use for filtering the issues to retrieve.
# Refer to the Redmine documentation in order to know the possible values.
redmine.tracker.filter=

# The status to use for filtering the issue to retrieve.  Default value is '*' retrieve all issues (open & closed)
# Refer to the Redmine documentation in order to know the possible values.
# Example :
# redmine.status.filter=open
redmine.status.filter=

# The API access key to use if authentication is needed
redmine.auth.apikey=7ac3db9bcf094e273dc2c6ec34ddf2c56862f760

# The username to use if authentication is needed (will not be used if API access key is set)
redmine.auth.username=

# The password to use if authentication is needed (will not be used if API access key is set)
redmine.auth.password=

# Whether or not to require that subject of the issue contains a valid ReqCoCo requirement tag --> @Req(....) or simply @Req()
# If set to 'true', then Redmine issues that don't have that tag into their subjects will not be retrieved.
# When this property is set to true, then 'redmine.req.declaration.customfield' must be empty.
# Default value is 'false'
redmine.req.tag.required=

# The name of the custom field which defines whether or not an issue should be considered as a requirement.
# The custom field to use must contain a string value of 'true' (case insensitive).
# If the value is 'true', the issue will be considered as a requirement.
# It is recommended to use a custom field of type list which is NOT multivalued where the possible values include at least the string  ==> true
# If the custom field is of type 'text', it may be useful to set this example of regular expression ===> ^(true|false)$
# When using this property, then 'redmine.req.tag.required' must be set to 'false' 
# OPTIONAL
# Example : redmine.req.declaration.customfield=requirement
redmine.req.declaration.customfield=

# The name of the custom field which defines the revision of the requirement
# The value retrieved from this custom field takes precedence over the value defined into the requirement tag into the subject.
# Using this way of defining requirement revisions avoid to pollute the issues subjects/titles with fuzzy tags.
# OPTIONAL
# Example: redmine.req.revision.customfield=requirement revision
redmine.req.revision.customfield=

# Comma separated of extra properties to add during the API REST call
# Example : 
redmine.extra.properties.key.1=assigned_to_id
redmine.extra.properties.value.1=1
redmine.extra.properties.key.2=category_id
redmine.extra.properties.value.2=3

#===============================
#### GITHUB
#===============================

# The owner of the repository
github.repo.owner=

# The name of the repository
github.repo.name=

# The username to use for authenticating and being able to make API requests
github.auth.username=

# The password of user for authenticating and being able to make API requests
# Required if and only if the user/passs authentication type is used.
github.auth.password=

# The access token to use in order to make API requests
github.oauth.api.key=

# Whether or not it is required to have a Requirement Tag into the issue's title.
github.req.tag.required=false

# The filters to use for retrieving the Github issues.
## Refer to the online documentation --> https://developer.github.com/v3/issues/#parameters
### 'state' Filter
github.issues.filter.key.state=state
github.issues.filter.value.state=all
### 'labels' Filter
github.issues.filter.key.labels=
github.issues.filter.value.labels=
### 'sort' Filter
github.issues.filter.key.sort=
github.issues.filter.value.sort=
### 'direction' Filter
github.issues.filter.key.direction=
github.issues.filter.value.direction=
### 'since' Filter
github.issues.filter.key.since=
github.issues.filter.value.since=
### 'filter' Filter
github.issues.filter.key.filter=
github.issues.filter.value.filter=
